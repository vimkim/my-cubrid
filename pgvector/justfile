# Justfile for PostgreSQL operations
###############################################################################
# Variables (can be overridden with xxx=yyy)
###############################################################################

database := 'vimkimdb'
table := 'items'

###############################################################################
# Setup (used only once)
###############################################################################

add-group:
    sudo usermod -aG postgres vimkim
    id vimkim
    getent group postgres
    groups

change-permission:
    sudo find /var/lib/pgsql -type d -exec chmod 750 {} \;
    sudo find /var/lib/pgsql -type f -exec chmod 660 {} \;

###############################################################################
# Useful
###############################################################################

auto-explain:
    echo 'use below in psql'
    LOAD 'auto_explain';
    SET auto_explain.log_analyze = on;
    SET auto_explain.log_min_duration = 0; -- log all queries
    SET auto_explain.log_timing = on;
    SET client_min_messages = 'log';

###############################################################################
# Administration (Used only daily)
###############################################################################

initdb:
    sudo mkdir -p /var/lib/pgsql/data
    sudo chown postgres:postgres /var/lib/pgsql/data
    sudo -u postgres initdb -D /var/lib/pgsql/data
    sudo -u postgres createuser --pwprompt vimkim

createuser:
    psql -U postgres -c "DROP USER vimkim;"
    psql -U postgres -c "CREATE USER vimkim WITH SUPERUSER PASSWORD 'qwfpqwfp';"

createdb:
    createdb vimkimdb

# Backup a database
backup:
    pg_dump -d {{ database }} > backup_$(date +"%Y%m%d_%H%M%S").sql

server-start:
    sudo -u postgres pg_ctl -D /var/lib/pgsql/data start

server-stop:
    sudo -u postgres pg_ctl -D /var/lib/pgsql/data stop

server-restart:
    sudo -u postgres pg_ctl -D /var/lib/pgsql/data restart

server-reload:
    sudo -u postgres pg_ctl -D /var/lib/pgsql/data reload

###############################################################################
# Monitoring
###############################################################################

psql:
    psql -d {{ database }}

# List all tables
list-tables:
    psql -d {{ database }} -c "SELECT * FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';"

# Get column info for a table
table-info:
    psql -d {{ database }} -c "SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = '{{ table }}';"

# Run a custom query
query query:
    psql -d {{ database }} -c "{{ query }}"

count-number-of-rows:
    psql -d {{ database }} -c "SELECT * from tbl1 limit 5;"
    psql -d {{ database }} -c "SELECT * from tbl2 limit 5;"
    psql -d {{ database }} -c "SELECT count(*) as tbl1_count from tbl1;"
    psql -d {{ database }} -c "SELECT count(*) as tbl2_count from tbl2;"

get-one-vector-from-two-tables:
    psql -d {{ database }} -c "SELECT * from tbl1 limit 1;"
    psql -d {{ database }} -c "SELECT * from tbl2 limit 1;"

# \pset pager off, or .psqlrc
pager-off:
    psql -P pager-off

get-vector-indexes:
    psql -d {{ database }} -c "select * from pg_indexes where tablename = 'tbl1' or tablename = 'tbl2'";

get-pgtune-parameters:
    psql -d {{ database }} -c "SELECT name, setting, unit, source FROM pg_settings WHERE name IN ( \
    'max_connections', \
    'shared_buffers', \
    'effective_cache_size', \
    'maintenance_work_mem', \
    'checkpoint_completion_target', \
    'wal_buffers', \
    'default_statistics_target', \
    'random_page_cost', \
    'effective_io_concurrency', \
    'work_mem', \
    'huge_pages', \
    'min_wal_size', \
    'max_wal_size', \
    'max_worker_processes', \
    'max_parallel_workers_per_gather', \
    'max_parallel_workers', \
    'max_parallel_maintenance_workers' \
    );"

###############################################################################
# Vector Load
###############################################################################

deprecated-vector-load-tbl:
    uv run --directory ./vectorload vectorload.py --csv1 ../datagen/pgvector_test_data1.csv --csv2 ../datagen/pgvector_test_data2.csv --tablename tbl

vector-load-tbl:
    uv run --directory ./vectorload/load_vector.py --csv ../datagen/pgvector_test_data1.csv --tablename tbl1

amplify-vectors-tbl:
    psql -d {{ database }} -c "INSERT INTO tbl (vec1, vec2) SELECT a.vec1, a.vec2 FROM tbl a, tbl b limit 999000;"

psq:
    psql -d {{ database }} -c "

###############################################################################
# Examples
###############################################################################

select-cosine-distance:
    psql -d {{ database }} -c "select vec1 <=> vec2 as cosine_distance from tbl limit 1000000;"

explain-analyze-select-cosine-distance:
    psql -d {{ database }} -c "explain (analyze, buffers, verbose) select vec1 <=> vec2 as cosine_distance from tbl limit 1000000;"

l2-distance-1000000:
    psql -qd {{ database }} -c "select t1.id, t2.id, t1.embedding <-> t2.embedding as l2_distance from tbl1 t1 cross join tbl1 t2;"

l1-distance-1000000:
    psql -qd {{ database }} -c "select t1.id, t2.id, t1.embedding <+> t2.embedding as l1_distance from tbl1 t1 cross join tbl1 t2;"

cosine-distance-1000000:
    psql -qd {{ database }} -c "select t1.id, t2.id, t1.embedding <=> t2.embedding as cosine_distance from tbl1 t1 cross join tbl1 t2;"

inner-product-1000000:
    psql -qd {{ database }} -c "select t1.id, t2.id, t1.embedding <#> t2.embedding as inner_product from tbl1 t1 cross join tbl1 t2;"

benshmark-1000000:
    psql -qd {{ database }} -c "select t1.id, t2.id, t1.embedding <-> t2.embedding as l2_distance, t1.embedding <=> t2.embedding as cosine_distance, t1.embedding <#> t2.embedding as inner_product, l1_distance(t1.embedding, t2.embedding) as l1_distance from tbl1 t1 cross join tbl1 t2 limit 10;"

time-l1-distance-1000000:
    time (PAGER= psql -qd vimkimdb -c "select t1.id, t2.id, t1.embedding <+> t2.embedding as l1_distance from tbl1 t1 cross join tbl1 t2;" | tail)

time-l2-distance-1000000:
    time (PAGER= psql -qd vimkimdb -c "select t1.id, t2.id, t1.embedding <-> t2.embedding as l2_distance from tbl1 t1 cross join tbl1 t2;" | tail)

time-cosine-distance-100000:
    time (PAGER= psql -qd vimkimdb -c "select t1.id, t2.id, t1.embedding <=> t2.embedding as cosine_distance from tbl1 t1 cross join tbl1 t2 limit 100000;" | tail)

time-cosine-distance-1000000:
    time (PAGER= psql -qd vimkimdb -c "select t1.id, t2.id, t1.embedding <=> t2.embedding as cosine_distance from tbl1 t1 cross join tbl1 t2;" | tail)

explain-analyze-time-cosine-distance-1000000:
    PAGER= psql -qd vimkimdb -c "explain analyze select t1.id, t2.id, t1.embedding <=> t2.embedding as cosine_distance from tbl1 t1 cross join tbl1 t2;"

count-simd:
    objdump -d -M intel vector.so | grep -E 'addps|mulps|vmov|vadd|vmul|vfma|vxor' | wc -l

check-simd:
    objdump -d -M intel vector.so | grep -E 'addps|mulps|vmov|vadd|vmul|vfma|vxor' | wc -l
    objdump -d -M intel /usr/lib64/pgsql/vector.so | grep -E 'addps|mulps|vmov|vadd|vmul|vfma|vxor' | wc -l

check-dimensions:
    psql -tAqd vimkimdb -c 'select count(*) from tbl_256_75000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_256_150000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_256_300000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_768_75000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_768_150000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_768_300000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_1536_75000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_1536_150000;'
    psql -tAqd vimkimdb -c 'select count(*) from tbl_1536_300000;'

collect-256:
    ./pg_collect_stats.sh 10 50000 vimkimdb tbl_256_300000 256
    ./pg_collect_stats.sh 10 100000 vimkimdb tbl_256_300000 256
    ./pg_collect_stats.sh 10 150000 vimkimdb tbl_256_300000 256
    ./pg_collect_stats.sh 10 200000 vimkimdb tbl_256_300000 256
    ./pg_collect_stats.sh 10 250000 vimkimdb tbl_256_300000 256
    ./pg_collect_stats.sh 10 300000 vimkimdb tbl_256_300000 256

collect-768:
    ./pg_collect_stats.sh 10 50000 vimkimdb tbl_768_300000 768
    ./pg_collect_stats.sh 10 100000 vimkimdb tbl_768_300000 768
    ./pg_collect_stats.sh 10 150000 vimkimdb tbl_768_300000 768
    ./pg_collect_stats.sh 10 200000 vimkimdb tbl_768_300000 768
    ./pg_collect_stats.sh 10 250000 vimkimdb tbl_768_300000 768
    ./pg_collect_stats.sh 10 300000 vimkimdb tbl_768_300000 768

collect-1536:
    ./pg_collect_stats.sh 10 50000 vimkimdb tbl_1536_150000 1536
    ./pg_collect_stats.sh 10 100000 vimkimdb tbl_1536_150000 1536
    ./pg_collect_stats.sh 10 150000 vimkimdb tbl_1536_150000 1536

collect-data: collect-256 collect-768 collect-1536

filter-data:
    open pg_results.jsonl | lines | each { from json } | where stat == 'avg' | where metric has "SCAN" | to csv | clip
