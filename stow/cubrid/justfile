mod? local 'local.just'

set shell := ["nu", "-c"]

default: build

alias b := build
alias c := configure
alias bd := build-debug
alias bp := build-profile
alias cc := csql-demodb-cs
alias cs := csql-demodb-sa
alias bvr := build-vector-run
alias brvr := build-recreate-vector-run
alias vr := vector-run
alias brt := build-recreate-test
alias t := test

git-dir-worktree-nvim-head:
  git worktree add ../nvim-head -b NVIM_HEAD

git-dir-worktree-nvim-head-clean:
  git worktree prune
  git branch -D NVIM_HEAD

git-dir-change-base:
  $env.GIT_DIR = '../nvim-head/.git'
  $env.GIT_WORK_TREE = '.'

git-dir-recover-base:
  $env.GIT_DIR = './.git'
  $env.GIT_WORK_TREE = '.'

csql-prepare:
    csql -Sudba testdb -i csql-prepare.sql

csql-run:
    csql -Sudba testdb -i csql-run.sql

build-debug-oldway-gcc14:
    CXXFLAGS="-fdiagnostics-color=always" CFLAGS="-fdiagnostics-color=always -Wno-int-conversion -Wno-incompatible-pointer-types -Wno-implicit-function-declaration" ./build.sh -m debug -b build_debug ./install_debug build

build-release-oldway-gcc14:
    CXXFLAGS="-fdiagnostics-color=always" CFLAGS="-fdiagnostics-color=always -Wno-int-conversion -Wno-incompatible-pointer-types -Wno-implicit-function-declaration" ./build.sh -m release -b build_rel -p ./install_rel build

server-start-demodb:
    cubrid server start demodb

server-restart-demodb:
    cubrid server restart demodb

server-stop-demodb:
    cubrid server stop demodb

server-start-testdb:
    cubrid server start testdb

server-restart-testdb:
    cubrid server restart testdb

server-stop-testdb:
    cubrid server stop testdb

get-server-config: paramdump-testdb

paramdump-ann:
    cubrid paramdump ann | grep 'buffer'

paramdump-testdb:
    cubrid paramdump testdb | grep 'buffer'

_gum-confirm-no:
    @# asks, the default is "NO"
    @gum confirm --default=false

git-sync-with-upstream:
    git fetch --all --prune
    git pull cub HEAD

# Echo
echo-hello:
    @echo "Hello, World!"

_3rdparty-cmake-remove:
    rm 3rdparty/CMakeLists.txt

_clang-support:
    sed -i '/message(FATAL_ERROR "We currently do not support ${CMAKE_CXX_COMPILER_ID} compiler")/d' CMakeLists.txt

stow-create:
    ~/my-cubrid/stow-create.sh
    stow --dir=$"($env.MY_CUBRID)/stow" --target=. cubrid
    stow --dir=$"($env.MY_CUBRID)/stow" --target=. gdb

stow-delete:
    stow -D --dir=$"($env.MY_CUBRID)/stow" --target=. cubrid
    stow -D --dir=$"($env.MY_CUBRID)/stow" --target=. gdb

stow-cb:
    stow -d ~/my-cubrid -t ~/gh/cb stow-cb

# install

install-dir-remove: _gum-confirm-no
    /bin/rm -rf $CUBRID

database-remove: _gum-confirm-no
    /bin/rm -rf $CUBRID_DATABASES

# CMake

prepare: stow-create
    git submodule update --init cubrid-cci
    # open ($env.MY_CUBRID | path join developer-patch.diff) | patch -N -r rej.rej -p1 | ignore
    open ($env.MY_CUBRID | path join clang20.diff) | patch -N -r rej.rej -p1 | ignore
    direnv allow

cpptrace:
    open ($env.MY_CUBRID | path join cpptrace.diff) | patch -N -r rej.rej -p1

configure:
    cmake --preset $env.PRESET_MODE

cmake-preset-mode-select:
    cmake-preset-mode-select.sh

prepare-build:
    if (which cubrid | is-not-empty) {
    cubrid service stop | ignore; cubrid broker stop | ignore
    }

configure-build: prepare-build configure build

build: prepare-build cmake-build-install-all-rg

build-update: cmake-build-install-all update-cubrid-conf

update-cubrid-conf:
    # sed -i 's/log_buffer_size=512M/log_buffer_size=4G/' $"($env.CUBRID)/conf/cubrid.conf"
    sed -i 's/data_buffer_size=512M/data_buffer_size=16G/' $"($env.CUBRID)/conf/cubrid.conf"

update-restart-testdb: update-cubrid-conf server-restart-testdb

cmake-build-install-3rdparty:
    cmake --build --preset $env.PRESET_MODE --target 3rdparty/install

cmake-build-install-csql-util: cmake-build-install-3rdparty
    cmake --build --preset $env.PRESET_MODE --target util/install

# tip: ninja above 1.10 understands export CLICOLOR_FORCE=1 and prints color even when piped
cmake-build-install-all-rg:
    cmake --build --preset $env.PRESET_MODE --target install | tee { save -f --raw build.log } | rg -i -A 3 'error:|success|install'

cmake-build-install-all:
    cmake --build --preset $env.PRESET_MODE --target install

build-debug:
    cmake --build --preset mydebug --target install

build-profile:
    cmake --build --preset myprofile --target install

cmake-build-target:
    cmake-build-target-fuzzy.sh $CUBRID_BUILD_DIR

clear-cache:
    /bin/rm -rf $"($env.CUBRID_BUILD_DIR)/CMakeCache.txt" $"($env.CUBRID_BUILD_DIR)/CMakeFiles"

build-target:
    cmake --build --preset $env.PRESET_MODE --target help | awk -F': ' '{print $1}' | fzf | xargs -I {} cmake --build --preset $env.PRESET_MODE --target {}

# CSQL

csql-testdb-cs: paramdump-testdb
    csql.sh

csql-testdb-sa:
    csql.sh

csql-demodb-cs:
    csql -u dba demodb

csql-demodb-sa:
    csql -u dba demodb -S

cgdb-csql-demodb-cs:
    cgdb --args csql -u dba demodb

cgdb-csql-demodb-sa:
    cgdb --args csql -u dba demodb -S

cgdb-csql-testdb-cs:
    cgdb --args csql.sh

cgdb-csql-testdb-sa:
    cgdb --args csql.sh

cgdb-csql-testdb-sa-vector-insert:
    cgdb --args csql.sh -c "insert into vt values ('[1, 2, 3]');"

print-current-server:
    ps -l | where command has 'cub_server' | where cwd has 'vimkim'

cgdb-cub-server-testdb: print-current-server
    cgdb -p (ps -l | where command has 'cub_server testdb' | where cwd has 'vimkim' | get pid | first) $"($env.CUBRID_BUILD_DIR)/bin/cub_server"

core csql CORE:
    cgdb csql core {{ CORE }}

coredumpctl-core-csql:
    coredumpctl debug --debugger=cgdb csql

core-delete:
    @gum confirm
    /bin/rm -rf core.*

# gdbserver

gdbserver:
    gdbserver :9999 csql -u dba demodb -S

gdbserver-i:
    gdbserver :9999 csql -u dba demodb -S -i run.sql

# utils

list-dbtype-function:
    fd -H -I dbtype_function build_preset_"$env.PRESET_MODE"

# createdb

db-create-testdb:
    ^mkdir -p $"($env.CUBRID_DATABASES)/testdb"
    # cubrid createdb --db-page-size=8K --db-volume-size=20M --log-volume-size=20M testdb en_US.utf8 -F $"($env.CUBRID_DATABASES)/testdb"
    # cubrid createdb --db-volume-size=20M --log-volume-size=20M testdb en_US.utf8 -F $"($env.CUBRID_DATABASES)/testdb"
    cubrid createdb --db-page-size=8K --db-volume-size=100M --log-volume-size=100M testdb en_US.utf8 -F $"($env.CUBRID_DATABASES)/testdb"

db-delete-testdb:
    cubrid deletedb testdb

db-recreate-testdb: db-delete-testdb db-create-testdb

db-stop-recreate-start-testdb: server-stop-testdb db-recreate-testdb server-start-testdb

db-create-demodb:
    mkdir -p $CUBRID_DATABASES/demodb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M demodb en_US.utf8 -F $CUBRID_DATABASES/demodb
    cubrid loaddb -u dba -s $CUBRID/demo/demodb_schema -d $CUBRID/demo/demodb_objects demodb

db-delete-demodb:
    cubrid deletedb demodb

db-recreate-demodb: db-delete-demodb db-create-demodb

# vector
create-vector:
    csql.sh -c 'drop if exists vt;'
    csql.sh -c 'create table vt (vec vector);'

create-vector-with-args:
    echo "hello"
    # csql.sh -c 'create table vta (vec vector(3));'
    # csql.sh -c 'create table vta2 (vec vector(3, FLOAT));'
    # csql.sh -c 'create table vta2 (vec vector(3, NUMERIC));' && exit 1 || echo "hello"

desc-vector-table:
    csql.sh -c 'desc vt;'
    csql.sh -c 'show columns from vt'
    csql.sh -c 'show create table vt'

insert-vector:
    csql.sh -c "insert into tbl (vec) values( '[4.321,1, 2,   3.5]' );"

vector-insert-more:
    csql.sh -c "insert into vt (vec) values( '[1,2,3,4,5,6,7,7]' );"
    csql.sh -c "insert into vt (vec) values( '[1234,12341234,123412341234,1234123412341234.1234   ]' );"
    csql.sh -c "insert into vt (vec) values( '[3,3,3,3.5,2.4]' );"

vector-insert-more-more:
    # Basic floating point formats
    csql.sh -c "insert into vt (vec) values('[1.0, 2.0, 3.0]');"
    csql.sh -c "insert into vt (vec) values('[1.1111, 2.2222, 3.3333, 4.4444]');"
    csql.sh -c "insert into vt (vec) values('[0.1, 0.01, 0.001, 0.0001]');"
    # Scientific notation
    csql.sh -c "insert into vt (vec) values('[1.234e-5, 1.234e5, 1.234e10]');"
    csql.sh -c "insert into vt (vec) values('[1E-10, 1E10, 1E-3]');"
    # Mixed integer and float
    csql.sh -c "insert into vt (vec) values('[1, 2.5, 3, 4.75, 5]');"
    # Negative numbers
    csql.sh -c "insert into vt (vec) values('[-1.5, -2.25, -3.75]');"
    csql.sh -c "insert into vt (vec) values('[-0.001, -0.002, -0.003]');"
    # Edge cases
    csql.sh -c "insert into vt (vec) values('[0.0, -0.0, 1.0, -1.0]');"
    csql.sh -c "insert into vt (vec) values('[9999999.9999999, -9999999.9999999]');"
    # Whitespace handling
    csql.sh -c "insert into vt (vec) values('[  1.5  ,  2.5  ,  3.5  ]');"
    csql.sh -c "insert into vt (vec) values('[1.1,    2.2,   3.3   ]');"
    # Precision tests
    csql.sh -c "insert into vt (vec) values('[1.123456789, 2.123456789, 3.123456789]');"
    csql.sh -c "insert into vt (vec) values('[0.000000001, 0.999999999]');"
    # Mixed precision
    csql.sh -c "insert into vt (vec) values('[1.1, 2.22, 3.333, 4.4444, 5.55555]');"

select-vector:
    csql.sh -c "select * from vt;"

vector-run: create-vector create-vector-with-args desc-vector-table insert-vector vector-insert-more select-vector
    just vector-insert-more-more
    just select-vector

build-vector-run: build vector-run

build-create-vector-run: build db-create-testdb vector-run

recreate-testdb: db-delete-testdb db-create-testdb

recreate-vector-run: recreate-testdb vector-run

build-recreate-vector-run: build recreate-testdb vector-run

build-restart-testdb: build server-restart-testdb

# git
git-pull-origin-head:
    git pull origin $(git rev-parse --abbrev-ref HEAD)

git-pull-upstream-head:
    git pull upstream $(git rev-parse --abbrev-ref HEAD)

git-pull-cub-head:
    git pull cub $(git rev-parse --abbrev-ref HEAD)

insert-vectors:
    csql.sh -i ./vector-insert.sql

build-recreate-test: build recreate-testdb test

test: test-vector

build-and-test: build test

test-vector: recreate-testdb insert-vectors test-vector-select

test-vector-select:
    ./test-vector-select.sh

perfect-error-disable-flags:
    CFLAGS='-Wno-int-conversion -Wno-implicit-function-declaration -w' CXXFLAGS='-Wno-c++11-narrowing -Wno-non-pod-varargs -w' CC=clang CXX=clang++ ./build.sh -m debug build

cmakecache-delete:
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

build-delete: _gum-confirm-no
    /bin/rm -rf $CUBRID_BUILD_DIR

asdf-java:
    asdf install java $(asdf list all java | fzf)

asdf-java-global:
    asdf global java $(asdf list java | fzf)

asdf-java-local:
    asdf local java $(asdf list java | fzf)

uftrace-record:
    uftrace record -- csql -u dba testdb -S ???

uftrace-record-start_csql:
    uftrace record -F start_csql -- csql -u dba testdb -S ???

uftrace-dump-chrome:
    uftrace dump --chrome o> $"uftrace-chrome-(^date '+%Y%m%d_%H%M%S').json"

uftrace-dump-flamegraph:
    uftrace dump --flame-graph --sample-time=1us o> $"uftrace-flame-(^date '+%Y%m%d_%H%M%S').log"

uftrace-preview:
    uftrace dump --flame-graph --sample-time=1us | flamelens

uftrace-serve-trace:
    trace_processor --httpd ./uftrace-*.json

format-git-changed-dryrun:
    cubrid-format-gitchanged.sh -d
    just format

format-git-changed:
    @gum confirm
    cubrid-format-gitchanged.sh

format-one-file:
    cubrid-format-codestyle.sh $(fd | fzf)

format-cubvec-diff:
    git diff --name-only origin/cubvec/cubvec | xargs -I {} sh -c 'cubrid-format-codestyle.sh {}'

memleak-build-cubvec-assert-server: build server-start-testdb
    csql.sh -c "drop table if exists vt;"
    csql.sh -c "create table vt (vec vector);"
    csql.sh -c "insert into vt values ('[1, 2, 3]');" 2> trace.log
    # csql.sh -c "insert into vt values ('[1e-40, 2e+40]');"
    # csql.sh -c "insert into vt values ('[1, 2, nan]');"
    # csql.sh -c "select * from vt;"
    echo 'wow'

memleak-build-cubvec-assert: build
    csql.sh -c "drop table if exists vt;"
    csql.sh -c "create table vt (vec vector);"
    csql.sh -c "insert into vt values ('[1, 2, 3]');"

cubvec-30-l2-distance: cubvec-30-simple-sa
    # csql.sh -c "SELECT L2_DISTANCE('[1, 2, 3]', vec) FROM vector_table;"
    $MY_CUBRID/30-survey-distance/vector-distance.sh

cubvec-30-simple-cs:
    csql.sh -c "SELECT L2_DISTANCE('[1, 2, 3]', '[2, 3, 4]') FROM dual;"

cubvec-30-simple-sa:
    csql.sh -c "SELECT L2_DISTANCE('[1, 2, 3]', '[2, 3, 4]') FROM dual;"

build-test-30: build server-restart-testdb cubvec-30-l2-distance

build-test-30-simple-cs: build server-restart-testdb cubvec-30-simple-cs

build-test-30-simple-sa: build cubvec-30-simple-sa

build-recreate-distance: build recreate-testdb cubvec-30-l2-distance

run-cs: build-test-30-simple-cs

run-sa: cubvec-30-simple-sa

build-run-sa: build run-sa

debug-dual-cubvec: build
    csql.sh -c "drop table if exists vt;"
    csql.sh -c "create table vt (vec vector);"
    csql.sh -c "insert into vt values ('[1, 2, 3]');"
    csql.sh -c "insert into vt values ('[2, 3, 4]');"
    csql.sh -c "SELECT L2_DISTANCE(vec, '[5, 5, 5]') from vt;"
    csql.sh -c "SELECT L2_DISTANCE('[5, 5, 5]', vec) from vt;"
    csql.sh -c "SELECT L2_DISTANCE('[5, 5, 5]', '[6, 6, 6]') from vt;"

test-cs:

precommit: build test-cs

build-run-36: build run-36

run-36:
    csql.sh -c " \
    select L2_DISTANCE('[1, 2]', '[2, 3]');"

build-run-41: build run-41-vector-distance

run-41-old:
    csql.sh -c " \
    drop table if exists vt; \
    create table vt (vec vector); \
    insert into vt values ('[1.5, 2, 3e10]'); \
    SELECT vec from vt; \
    "

run-41-vector-distance:
    csql.sh -c " \
    select VECTOR_DISTANCE('[1, 2]', '[2, 3]', EUCLIDEAN); \
    select L2_DISTANCE('[1, 2]', '[2, 3]');"

build-run-47: build run-47

run-47:
    csql.sh -c "drop table if exists vt;"
    csql.sh -c "create table vt (vec vector);"
    csql.sh -c "insert into vt values ('[1.5, 2, 3e10]');"
    csql.sh -c "SELECT cast(vec as varchar) from vt;"

build-run-42: build run-42

run-42:
    csql.sh -c " \
    select L1_DISTANCE('[1, 2, 9]', '[2, 3, 0]');"

build-run: build run

run:
    just given-"$CURRENT_DIR"
    just when-"$CURRENT_DIR"
    just then-"$CURRENT_DIR"

build-given-when-then: build given when then

given-when-then: given when then

given:
    just given-"$CURRENT_DIR"

when:
    just when-"$CURRENT_DIR"

then:
    just then-"$CURRENT_DIR"

rr-when:
    just rr-when-"$CURRENT_DIR"

rr-when-23-create-vector-index:
    taskset -c 0-7 rr record csql.sh -c "create vector index idx on tbl (b);"

rr-replay:
    rr replay

given-when-then-23-2: given-23-create-vector-index-2 when-23-create-vector-index-2 then-23-create-vector-index-2

given-23-create-vector-index:
    csql.sh -c " \
    drop if exists tbl; \
    create table tbl (a int, b vector);"

when-23-create-vector-index:
    csql.sh -c "create vector index idx on tbl (b cosine);"

then-23-create-vector-index:
    csql.sh -c "show index from tbl;"

given-23-create-vector-index-2:
    csql.sh -c " \
    drop if exists items; \
    create table items (a int, embedding vector);"

when-23-create-vector-index-2:
    csql.sh -c "CREATE VECTOR INDEX embedding_hnsw_idx \
    ON items (embedding cosine) \
    WITH (M = 16, ef_construction = 64);"

then-23-create-vector-index-2:
    csql.sh -c "show index from items;"

prerun-23-create-vector-index:
    csql.sh -c " \
    drop if exists tbl; \
    create table tbl (b int);"

run-23-create-vector-index: then-23-create-vector-index

run-23-create-vector-index-check:
    csql.sh -c " \
    drop if exists tbl; \
    create table tbl (b int);"
    csql.sh -c "create vector index idx on tbl (b);"

run-44-inner-product:
    csql.sh -c " \
    select INNER_PRODUCT('[1, 2, 3]', '[2, 3, 5]');"

run-43-cosine-distance:
    csql.sh -c " \
    select COSINE_DISTANCE('[1, 2, 3]', '[2, 3, 5]');"

cosine-distance-100000:
    csql.sh -c 'select t1.id, t2.id, COSINE_DISTANCE(t1.embedding, t2.embedding) from tbl1 t1 cross join tbl1 t2 limit 100000;'

load-vector:
    csql.sh -c 'drop if exists tbl1; create table tbl1 (id int, vec1 vector, vec2 vector);'
    csql.sh -i ./vectorload/insert_batch_1.sql
    csql.sh -i ./vectorload/insert_batch_2.sql
    csql.sh -i ./vectorload/insert_batch_3.sql
    csql.sh -i ./vectorload/insert_batch_4.sql
    csql.sh -i ./vectorload/insert_batch_5.sql
    csql.sh -i ./vectorload/insert_batch_6.sql
    csql.sh -i ./vectorload/insert_batch_7.sql
    csql.sh -i ./vectorload/insert_batch_8.sql
    csql.sh -i ./vectorload/insert_batch_9.sql
    csql.sh -i ./vectorload/insert_batch_10.sql
    csql.sh -c "insert into tbl1 select (a.id, a.vec1, a.vec2) from tbl1 a, tbl1 b limit 999000"

given-36-bugfix-euclidean:
    csql.sh -c "drop if exists tbl; create table tbl (a int, b vector);"

when-36-bugfix-euclidean:
    csql.sh -c "insert into tbl values (1, '[1, 2, 3]');"

then-36-bugfix-euclidean:
    csql.sh -c "select L2_DISTANCE('[1, 2, 3]', b) from tbl;"

check-size:
    csql.sh -c 'select count(*) from tbl_256_75000;'
    csql.sh -c 'select count(*) from tbl_256_150000;'
    csql.sh -c 'select count(*) from tbl_256_300000;'

load-3-1:
    csql.sh -c 'create table tbl_3_1 (id int, vec vector(3));'
    # cubrid loaddb -S -u dba -d out/loaddb_3_1.object testdb
    cubrid loaddb -c 10240 -u dba -d out/loaddb_3_1.object --estimated-size=150000 testdb

load-3-1-check:
    csql.sh -c 'select * from tbl_3_1;'

load-256-zeroes:
    csql.sh -c 'create table tbl_256_zeroes (id int, vec vector(256));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_256_zeroes.object --estimated-size=75000 testdb

load-256-75000:
    csql.sh -c 'create table tbl_256_75000 (id int, vec vector(256));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_256_75000.object --estimated-size=75000 testdb

load-256-75000-9:
    csql.sh -c 'create table tbl_256_75000 (id int, vec vector(256));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_256_75000_limit_9.object --estimated-size=75000 testdb

load-even:
    csql.sh -c 'create table tbl_even (id int, vec vector);'
    cubrid loaddb -c 10240 -u dba -d out/even.object --estimated-size=75000 testdb

select-all-tbl_even:
    csql.sh -c 'select * from tbl_even;'

select-all-load-256-75000:
    csql.sh -c 'select * from tbl_256_75000;'

load-256-150000:
    csql.sh -c 'create table tbl_256_150000 (id int, vec vector(256));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_256_150000.object --estimated-size=150000 testdb

load-256-300000:
    csql.sh -c 'create table if not exists tbl_256_300000 (id int, vec vector(256));'
    cubrid loaddb -C -c 10240 -u dba -d out/loaddb_256_300000.object --estimated-size=300000 testdb

load-768-75000:
    csql.sh -c 'create table tbl_768_75000 (id int, vec vector(768));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_768_75000.object --estimated-size=75000 testdb

load-768-150000:
    csql.sh -c 'create table tbl_768_150000 (id int, vec vector(768));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_768_150000.object --estimated-size=150000 testdb

load-768-300000:
    csql.sh -c 'create table if not exists tbl_768_300000 (id int, vec vector(768));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_768_300000.object --estimated-size=300000 testdb

load-1536-75000:
    csql.sh -c 'create table tbl_1536_75000 (id int, vec vector(1536));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_1536_75000.object --estimated-size=75000 testdb

load-1536-150000:
    csql.sh -c 'create table tbl_1536_150000 (id int, vec vector(1536));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_1536_150000.object --estimated-size=150000 testdb

load-1536-300000:
    csql.sh -c 'create table tbl_1536_300000 (id int, vec vector(1536));'
    cubrid loaddb -c 10240 -u dba -d out/loaddb_1536_300000.object --estimated-size=300000 testdb

enn-collect-data-all: enn-collect-256 enn-collect-768 enn-collect-1536

enn-collect-256:
    ./enn-bench-cubvec.sh 10 50000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 100000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 150000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 200000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 250000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 260000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 270000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 280000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 290000 testdb tbl_256_300000
    ./enn-bench-cubvec.sh 10 300000 testdb tbl_256_300000

enn-collect-768:
    ./enn-bench-cubvec.sh 10 50000 testdb tbl_768_300000
    ./enn-bench-cubvec.sh 10 100000 testdb tbl_768_300000
    ./enn-bench-cubvec.sh 10 150000 testdb tbl_768_300000
    ./enn-bench-cubvec.sh 10 200000 testdb tbl_768_300000
    ./enn-bench-cubvec.sh 10 250000 testdb tbl_768_300000
    ./enn-bench-cubvec.sh 10 300000 testdb tbl_768_300000

enn-collect-1536:
    ./enn-bench-cubvec.sh 10 50000 testdb tbl_1536_150000
    ./enn-bench-cubvec.sh 10 100000 testdb tbl_1536_150000
    ./enn-bench-cubvec.sh 10 150000 testdb tbl_1536_150000

enn-collect-256-nytimes:
    ./enn-bench-cubvec.sh 10 50000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 100000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 150000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 200000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 250000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 260000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 270000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 280000 ann angular_24_100_290000_256 embedding ann ann
    ./enn-bench-cubvec.sh 10 290000 ann angular_24_100_290000_256 embedding ann ann

enn-jsonl-combine:
    open benchmarks/*.jsonl | save combined.jsonl

filter-data:
    open results.jsonl | lines | each { from json } | where stat == 'avg' | where metric has "SCAN TIME" | to csv | clip

csql: paramdump-testdb
    csql.sh

loaddb-debug:
    cubrid loaddb -S -u dba -d ./loaddb-debug/object testdb

select-all-from-tbl:
    csql.sh -c 'select * from tbl;'

select-all-from-tbl_3_1:
    csql.sh -c 'select * from tbl_3_1;'

vimkim-log:
    open vimkim.log | lines | parse "[{log_level}] [{function_name}] {message}"

bare-lazygit:
    with-env { GIT_DIR: ./bare.git.out, GIT_WORK_TREE: . } { lazygit }

bare-nvim:
    with-env { GIT_DIR: ./bare.git.out, GIT_WORK_TREE: . } { v }

prepare-ann:
    ^$"($env.HOME)/my-cubrid/prepare-ann.sh"

db-delete-ann:
    cubrid deletedb ann

db-create-ann:
    ^mkdir -p $"($env.CUBRID_DATABASES)/ann"
    cubrid createdb --db-volume-size=100M --log-volume-size=100M ann en_US.utf8 -F $"($env.CUBRID_DATABASES)/ann"

db-create-ann-initdb:
    mkdir /tmp/ann/initdb
    cubrid createdb --db-volume-size=100M --log-volume-size=100M ann en_US.utf8 -F /tmp/ann/initdb

check-simd-native:
    objdump -d $"($env.CUBRID)/lib/libcubrid.so" | rg metric_cos_gt -A 5 | rg ymm | wc -l

clang-tidy:
    fd '(\.h$)|(\.cpp$)|(\.c$)' src | entr -cr clang-tidy /_

edit-databases-txt:
    v $"($env.CUBRID_DATABASES)/databases.txt"

report-256-data:
    open benchmarks/*.jsonl | save combined.jsonl -f
    python enn-json-to-csv.py
    cp output.csv /home/vimkim/gh/enn-plots/cubvec.csv

extract-functions-heap_attrinfo:
    nm -C build_preset_debug_clang/cubrid/libcubrid.so | rg ' T ' | rg heap_attrinfo | rg -o 'heap_attrinfo[^(]*'

build-log:
    tspin -f build.log

run-log:
    tspin -f csql.access csql.err
