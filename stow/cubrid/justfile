default:
    @just --choose --justfile={{ justfile() }} -d {{ invocation_directory() }}

set shell := ["zsh", "-cu"]

alias b := build
alias c := configure
alias bd := build-debug
alias bp := build-profile
alias cc := csql-demodb-cs
alias cs := csql-demodb-sa
alias bvr := build-vector-run
alias brvr := build-recreate-vector-run
alias vr := vector-run
alias brt := build-recreate-test
alias t := test

_gum-confirm-no:
    @# asks, the default is "NO"
    @gum confirm --default=false

git-sync-with-upstream:
    git fetch --all --prune
    git pull cub HEAD

# Echo
echo-hello:
    @echo "Hello, World!"

_3rdparty-cmake-remove:
    rm ./3rdparty/CMakeLists.txt

_clang-support:
    sed -i '/message(FATAL_ERROR "We currently do not support ${CMAKE_CXX_COMPILER_ID} compiler")/d' CMakeLists.txt

stow-create:
    stow --dir=$MY_CUBRID/stow --target=. cubrid
    stow --dir=$MY_CUBRID/stow --target=. gdb

stow-delete:
    stow --dir=$MY_CUBRID/stow --target=. -D cubrid
    stow --dir=$MY_CUBRID/stow --target=. -D gdb

# CMake

prepare: _3rdparty-cmake-remove _clang-support stow-create
    git submodule update --init cubrid-cci
    sed -i 's/-ggdb /-ggdb3 /' CMakeLists.txt
    sed -i 's/set(LIBTBB_CONFIGURE -DCMAKE_INSTALL_PREFIX/set(LIBTBB_CONFIGURE -DTBB_STRICT=OFF -DCMAKE_INSTALL_PREFIX/' 3rdparty/CMakeLists.txt
    direnv allow

configure:
    cmake --preset $PRESET_MODE

configure-build: configure build

build:
    cmake --build --preset $PRESET_MODE --target install

build-debug:
    cmake --build --preset mydebug --target install

build-profile:
    cmake --build --preset myprofile --target install

clear-cache:
    @gum confirm
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

choose-preset-mode:
    @preset=$(gum choose "mydebug" "myprofile" "debug" "release") && echo "PRESET_MODE=$preset" > .env

# CSQL

csql-testdb-cs:
    csql -u dba testdb

csql-testdb-sa:
    csql -u dba testdb -S

csql-demodb-cs:
    csql -u dba demodb

csql-demodb-sa:
    csql -u dba demodb -S

cgdb-csql-demodb-cs:
    cgdb --args csql -u dba demodb

cgdb-csql-demodb-sa:
    cgdb --args csql -u dba demodb -S

cgdb-csql-testdb-cs:
    cgdb --args csql -u dba testdb

cgdb-csql-testdb-sa:
    cgdb --args csql -u dba testdb -S

cgdb-csql-testdb-sa-vector-insert:
    cgdb --args csql -u dba testdb -S -c "insert into vt values ('[1, 2, 3]');"

core csql CORE:
    cgdb csql core {{ CORE }}

core-delete:
    @gum confirm
    /bin/rm -rf core.*

# gdbserver

gdbserver:
    gdbserver :9999 csql -u dba demodb -S

gdbserver-i:
    gdbserver :9999 csql -u dba demodb -S -i run.sql

# utils

list-dbtype-function:
    fd -H -I dbtype_function build_preset_"$PRESET_MODE"

# createdb

db-create-testdb:
    mkdir -p $CUBRID_DATABASES/testdb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M testdb en_US.utf8 -F $CUBRID_DATABASES/testdb

db-delete-testdb:
    cubrid deletedb testdb

db-create-demodb:
    mkdir -p $CUBRID_DATABASES/demodb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M demodb en_US.utf8 -F $CUBRID_DATABASES/demodb
    cubrid loaddb -u dba -s $CUBRID/demo/demodb_schema -d $CUBRID/demo/demodb_objects demodb

db-delete-demodb:
    cubrid deletedb demodb

# vector
create-vector:
    csql -u dba testdb -S -c 'drop if exists vt;'
    csql -u dba testdb -S -c 'create table vt (vec vector);'

create-vector-with-args:
    echo "hello"
    # csql -u dba testdb -S -c 'create table vta (vec vector(3));'
    # csql -u dba testdb -S -c 'create table vta2 (vec vector(3, FLOAT));'
    # csql -u dba testdb -S -c 'create table vta2 (vec vector(3, NUMERIC));' && exit 1 || echo "hello"

desc-vector-table:
    csql -u dba testdb -S -c 'desc vt;'
    csql -u dba testdb -S -c 'show columns from vt'
    csql -u dba testdb -S -c 'show create table vt'

insert-vector:
    csql -u dba testdb -S -c "insert into vt (vec) values( '[4.321,1, 2,   3.5]' );"
    # csql -u dba testdb -S -c "insert into vt values( '[1, 2, 3]' );"
    # csql -u dba testdb -S -c "insert into vt values( {1, 2, 3} );"

vector-insert-more:
    csql -u dba testdb -S -c "insert into vt (vec) values( '[1,2,3,4,5,6,7,7]' );"
    csql -u dba testdb -S -c "insert into vt (vec) values( '[1234,12341234,123412341234,1234123412341234.1234   ]' );"
    csql -u dba testdb -S -c "insert into vt (vec) values( '[3,3,3,3.5,2.4]' );"

vector-insert-more-more:
    # Basic floating point formats
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.0, 2.0, 3.0]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1111, 2.2222, 3.3333, 4.4444]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.1, 0.01, 0.001, 0.0001]');"
    # Scientific notation
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.234e-5, 1.234e5, 1.234e10]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1E-10, 1E10, 1E-3]');"
    # Mixed integer and float
    csql -u dba testdb -S -c "insert into vt (vec) values('[1, 2.5, 3, 4.75, 5]');"
    # Negative numbers
    csql -u dba testdb -S -c "insert into vt (vec) values('[-1.5, -2.25, -3.75]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[-0.001, -0.002, -0.003]');"
    # Edge cases
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.0, -0.0, 1.0, -1.0]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[9999999.9999999, -9999999.9999999]');"
    # Whitespace handling
    csql -u dba testdb -S -c "insert into vt (vec) values('[  1.5  ,  2.5  ,  3.5  ]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1,    2.2,   3.3   ]');"
    # Precision tests
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.123456789, 2.123456789, 3.123456789]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.000000001, 0.999999999]');"
    # Mixed precision
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1, 2.22, 3.333, 4.4444, 5.55555]');"

select-vector:
    csql -u dba testdb -S -c "select * from vt;"

vector-run: create-vector create-vector-with-args desc-vector-table insert-vector vector-insert-more select-vector
    just vector-insert-more-more
    just select-vector

build-vector-run: build vector-run

build-create-vector-run: build db-create-testdb vector-run

recreate: db-delete-testdb db-create-testdb

recreate-vector-run: recreate vector-run

build-recreate-vector-run: build recreate vector-run

distance:
    csql -u dba testdb -S -c "SELECT L2_DISTANCE('[1, 2, 3]', '[2, 3, 4]') FROM dual;" # L2_DISTANCE의 인자로 들어왔을 때는 무조건 vector로
    csql -u dba testdb -S -c "SELECT L2_DISTANCE('[1, 2, 3]', vec) FROM vector_table;"

build-recreate-distance: build recreate distance

# git
git-pull-origin-head:
    git pull origin $(git rev-parse --abbrev-ref HEAD)

git-pull-upstream-head:
    git pull upstream $(git rev-parse --abbrev-ref HEAD)

git-pull-cub-head:
    git pull cub $(git rev-parse --abbrev-ref HEAD)

insert-vectors:
    csql -u dba testdb -S -i ./vector-insert.sql

build-recreate-test: build recreate test

test: test-vector

test-vector: insert-vectors test-vector-select

test-vector-select:
    ./test-vector-select.sh

perfect-error-disable-flags:
    CFLAGS='-Wno-int-conversion -Wno-implicit-function-declaration -w' CXXFLAGS='-Wno-c++11-narrowing -Wno-non-pod-varargs -w' CC=clang CXX=clang++ ./build.sh -m debug build

cmakecache-delete:
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

build-delete: _gum-confirm-no
    /bin/rm -rf $CUBRID_BUILD_DIR
