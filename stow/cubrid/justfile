default:
    @just --choose --justfile={{ justfile() }} -d {{ invocation_directory() }}

set shell := ["zsh", "-cu"]

alias b := build
alias c := configure
alias bd := build-debug
alias bp := build-profile
alias cc := csql-demodb-cs
alias cs := csql-demodb-sa
alias br := build-run
alias brr := build-recreate-run
alias r := run

_gum-confirm-no:
    @# asks, the default is "NO"
    @gum confirm --default=false

git-sync-with-upstream:
    git fetch --all --prune
    git pull cub HEAD

# Echo
echo-hello:
    @echo "Hello, World!"

stow-create:
    stow --dir=$MY_CUBRID/stow --target=. cubrid

stow-delete:
    stow --dir=$MY_CUBRID/stow --target=. -D cubrid

# CMake

prepare: stow-create
    git submodule update --init cubrid-cci
    sed -i 's/-ggdb /-ggdb3 /' CMakeLists.txt
    sed -i 's/set(LIBTBB_CONFIGURE -DCMAKE_INSTALL_PREFIX/set(LIBTBB_CONFIGURE -DTBB_STRICT=OFF -DCMAKE_INSTALL_PREFIX/' 3rdparty/CMakeLists.txt
    echo "PRESET_MODE=mydebug" > .env
    direnv allow

configure:
    cmake --preset $PRESET_MODE

configure-build: configure build
    cmake --preset $PRESET_MODE

build:
    cmake --build --preset $PRESET_MODE --target install

build-debug:
    cmake --build --preset mydebug --target install

build-profile:
    cmake --build --preset myprofile --target install

clear-cache:
    @gum confirm
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

choose-preset-mode:
    @preset=$(gum choose "mydebug" "myprofile" "debug" "release") && echo "PRESET_MODE=$preset" > .env

# CSQL

csql-testdb-cs:
    csql -u dba testdb

csql-testdb-sa:
    csql -u dba testdb -S

csql-demodb-cs:
    csql -u dba demodb

csql-demodb-sa:
    csql -u dba demodb -S

cgdb-csql-demodb-cs:
    cgdb --args csql -u dba demodb

cgdb-csql-demodb-sa:
    cgdb --args csql -u dba demodb -S

cgdb-csql-testdb-cs:
    cgdb --args csql -u dba testdb

cgdb-csql-testdb-sa:
    cgdb --args csql -u dba testdb -S

cgdb-csql-testdb-sa-vector-insert:
    cgdb --args csql -u dba testdb -S -c "insert into vt values ('[1, 2, 3]');"

core csql CORE:
    cgdb csql core {{ CORE }}

core-delete:
    @gum confirm
    /bin/rm -rf core.*

# gdbserver

gdbserver:
    gdbserver :9999 csql -u dba demodb -S

gdbserver-i:
    gdbserver :9999 csql -u dba demodb -S -i run.sql

# utils

list-dbtype-function:
    fd -H -I dbtype_function build_preset_"$PRESET_MODE"

# createdb

db-create-testdb:
    mkdir -p $CUBRID_DATABASES/testdb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M testdb en_US.utf8 -F $CUBRID_DATABASES/testdb

db-delete-testdb:
    cubrid deletedb testdb

db-create-demodb:
    mkdir -p $CUBRID_DATABASES/demodb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M demodb en_US.utf8 -F $CUBRID_DATABASES/demodb
    cubrid loaddb -u dba -s $CUBRID/demo/demodb_schema -d $CUBRID/demo/demodb_objects demodb

db-delete-demodb:
    cubrid deletedb demodb

# vector
create-vector:
    csql -u dba testdb -S -c 'create table vt (vec vector);'

create-vector-with-args:
    csql -u dba testdb -S -c 'create table vta (vec vector(3));'
    csql -u dba testdb -S -c 'create table vta2 (vec vector(3, FLOAT));'
    csql -u dba testdb -S -c 'create table vta2 (vec vector(3, NUMERIC));' && exit 1 || echo "hello"

desc-vector-table:
    csql -u dba testdb -S -c 'desc vt;'

insert-vector:
    csql -u dba testdb -S -c "insert into vt values( '[1, 2, 3]' );"
    @# csql -u dba testdb -S -c "insert into vt values( {1, 2, 3} );"

select-vector:
    csql -u dba testdb -S -c "select * from vt;"

run: create-vector create-vector-with-args desc-vector-table insert-vector select-vector

build-run: build run

build-create-run: build db-create-testdb run

recreate: db-delete-testdb db-create-testdb

recreate-run: recreate run

build-recreate-run: build recreate run
