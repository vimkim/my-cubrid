default:
    @just --choose --justfile={{ justfile() }} -d {{ invocation_directory() }}

set shell := ["zsh", "-cu"]

alias b := build
alias c := configure
alias bd := build-debug
alias bp := build-profile
alias cc := csql-demodb-cs
alias cs := csql-demodb-sa
alias bvr := build-vector-run
alias brvr := build-recreate-vector-run
alias vr := vector-run
alias brt := build-recreate-test
alias t := test

server-start-demodb:
    cubrid server start demodb

server-restart-demodb:
    cubrid server restart demodb

server-stop-demodb:
    cubrid server stop demodb

server-start-testdb:
    cubrid server start testdb || true

server-restart-testdb:
    cubrid server restart testdb

server-stop-testdb:
    cubrid server stop testdb

_gum-confirm-no:
    @# asks, the default is "NO"
    @gum confirm --default=false

git-sync-with-upstream:
    git fetch --all --prune
    git pull cub HEAD

# Echo
echo-hello:
    @echo "Hello, World!"

_3rdparty-cmake-remove:
    rm 3rdparty/CMakeLists.txt

_clang-support:
    sed -i '/message(FATAL_ERROR "We currently do not support ${CMAKE_CXX_COMPILER_ID} compiler")/d' CMakeLists.txt

stow-create:
    stow --dir=$MY_CUBRID/stow --target=. cubrid
    stow --dir=$MY_CUBRID/stow --target=. gdb

stow-delete:
    stow --dir=$MY_CUBRID/stow --target=. -D cubrid
    stow --dir=$MY_CUBRID/stow --target=. -D gdb

# install

install-dir-remove: _gum-confirm-no
    /bin/rm -rf $CUBRID

database-remove: _gum-confirm-no
    /bin/rm -rf $CUBRID_DATABASES

# CMake

gcc-8-fail:
    gcc -dumpversion | grep -q "^8" && { echo "GCC 8 detected - failing"; return 1; } || echo "GCC version check passed"

prepare: stow-create
    git submodule update --init cubrid-cci
    patch -p1 < $MY_CUBRID/developer-patch.diff
    direnv allow

cpptrace:
    patch -p1 < $MY_CUBRID/cpptrace.diff

configure: gcc-8-fail
    cmake --preset $PRESET_MODE

cmake-preset-mode-select:
    cmake --list-presets=configure | grep -v "Available" | sed 's/"//g' | tr -d ' ' | fzf | xargs -I {} echo "PRESET_MODE={}" > .env

configure-build: configure build

build: gcc-8-fail cmake-build-install-all

cmake-build-install-3rdparty:
    cmake --build --preset $PRESET_MODE --target 3rdparty/install

cmake-build-install-csql-util: cmake-build-install-3rdparty
    cmake --build --preset $PRESET_MODE --target util/install

cmake-build-install-all:
    cmake --build --preset $PRESET_MODE --target install

build-debug:
    cmake --build --preset mydebug --target install

build-profile:
    cmake --build --preset myprofile --target install

cmake-build-target:
    cmake-build-target-fuzzy.sh $CUBRID_BUILD_DIR

clear-cache:
    @gum confirm
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

build-target:
    cmake --build --preset $PRESET_MODE --target help | awk -F': ' '{print $1}' | fzf | xargs -I {} cmake --build --preset $PRESET_MODE --target {}

# CSQL

csql-testdb-cs:
    csql -u dba testdb

csql-testdb-sa:
    csql -u dba testdb -S

csql-demodb-cs:
    csql -u dba demodb

csql-demodb-sa:
    csql -u dba demodb -S

cgdb-csql-demodb-cs:
    cgdb --args csql -u dba demodb

cgdb-csql-demodb-sa:
    cgdb --args csql -u dba demodb -S

cgdb-csql-testdb-cs:
    cgdb --args csql -u dba testdb

cgdb-csql-testdb-sa:
    cgdb --args csql -u dba testdb -S

cgdb-csql-testdb-sa-vector-insert:
    cgdb --args csql -u dba testdb -S -c "insert into vt values ('[1, 2, 3]');"

core csql CORE:
    cgdb csql core {{ CORE }}

coredumpctl-core-csql:
    coredumpctl debug --debugger=cgdb csql

core-delete:
    @gum confirm
    /bin/rm -rf core.*

# gdbserver

gdbserver:
    gdbserver :9999 csql -u dba demodb -S

gdbserver-i:
    gdbserver :9999 csql -u dba demodb -S -i run.sql

# utils

list-dbtype-function:
    fd -H -I dbtype_function build_preset_"$PRESET_MODE"

# createdb

db-create-testdb:
    mkdir -p $CUBRID_DATABASES/testdb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M testdb en_US.utf8 -F $CUBRID_DATABASES/testdb

db-delete-testdb:
    cubrid deletedb testdb

db-create-demodb:
    mkdir -p $CUBRID_DATABASES/demodb
    cubrid createdb --db-volume-size=20M --log-volume-size=20M demodb en_US.utf8 -F $CUBRID_DATABASES/demodb
    cubrid loaddb -u dba -s $CUBRID/demo/demodb_schema -d $CUBRID/demo/demodb_objects demodb

db-delete-demodb:
    cubrid deletedb demodb

# vector
create-vector:
    csql -u dba testdb -S -c 'drop if exists vt;'
    csql -u dba testdb -S -c 'create table vt (vec vector);'

create-vector-with-args:
    echo "hello"
    # csql -u dba testdb -S -c 'create table vta (vec vector(3));'
    # csql -u dba testdb -S -c 'create table vta2 (vec vector(3, FLOAT));'
    # csql -u dba testdb -S -c 'create table vta2 (vec vector(3, NUMERIC));' && exit 1 || echo "hello"

desc-vector-table:
    csql -u dba testdb -S -c 'desc vt;'
    csql -u dba testdb -S -c 'show columns from vt'
    csql -u dba testdb -S -c 'show create table vt'

insert-vector:
    csql -u dba testdb -S -c "insert into vt (vec) values( '[4.321,1, 2,   3.5]' );"
    # csql -u dba testdb -S -c "insert into vt values( '[1, 2, 3]' );"
    # csql -u dba testdb -S -c "insert into vt values( {1, 2, 3} );"

vector-insert-more:
    csql -u dba testdb -S -c "insert into vt (vec) values( '[1,2,3,4,5,6,7,7]' );"
    csql -u dba testdb -S -c "insert into vt (vec) values( '[1234,12341234,123412341234,1234123412341234.1234   ]' );"
    csql -u dba testdb -S -c "insert into vt (vec) values( '[3,3,3,3.5,2.4]' );"

vector-insert-more-more:
    # Basic floating point formats
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.0, 2.0, 3.0]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1111, 2.2222, 3.3333, 4.4444]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.1, 0.01, 0.001, 0.0001]');"
    # Scientific notation
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.234e-5, 1.234e5, 1.234e10]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1E-10, 1E10, 1E-3]');"
    # Mixed integer and float
    csql -u dba testdb -S -c "insert into vt (vec) values('[1, 2.5, 3, 4.75, 5]');"
    # Negative numbers
    csql -u dba testdb -S -c "insert into vt (vec) values('[-1.5, -2.25, -3.75]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[-0.001, -0.002, -0.003]');"
    # Edge cases
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.0, -0.0, 1.0, -1.0]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[9999999.9999999, -9999999.9999999]');"
    # Whitespace handling
    csql -u dba testdb -S -c "insert into vt (vec) values('[  1.5  ,  2.5  ,  3.5  ]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1,    2.2,   3.3   ]');"
    # Precision tests
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.123456789, 2.123456789, 3.123456789]');"
    csql -u dba testdb -S -c "insert into vt (vec) values('[0.000000001, 0.999999999]');"
    # Mixed precision
    csql -u dba testdb -S -c "insert into vt (vec) values('[1.1, 2.22, 3.333, 4.4444, 5.55555]');"

select-vector:
    csql -u dba testdb -S -c "select * from vt;"

vector-run: create-vector create-vector-with-args desc-vector-table insert-vector vector-insert-more select-vector
    just vector-insert-more-more
    just select-vector

build-vector-run: build vector-run

build-create-vector-run: build db-create-testdb vector-run

recreate: db-delete-testdb db-create-testdb

recreate-vector-run: recreate vector-run

build-recreate-vector-run: build recreate vector-run

# git
git-pull-origin-head:
    git pull origin $(git rev-parse --abbrev-ref HEAD)

git-pull-upstream-head:
    git pull upstream $(git rev-parse --abbrev-ref HEAD)

git-pull-cub-head:
    git pull cub $(git rev-parse --abbrev-ref HEAD)

insert-vectors:
    csql -u dba testdb -S -i ./vector-insert.sql

build-recreate-test: build recreate test

test: test-vector

build-and-test: build test

test-vector: recreate insert-vectors test-vector-select

test-vector-select:
    ./test-vector-select.sh

perfect-error-disable-flags:
    CFLAGS='-Wno-int-conversion -Wno-implicit-function-declaration -w' CXXFLAGS='-Wno-c++11-narrowing -Wno-non-pod-varargs -w' CC=clang CXX=clang++ ./build.sh -m debug build

cmakecache-delete:
    /bin/rm -rf $CUBRID_BUILD_DIR/CMakeCache.txt $CUBRID_BUILD_DIR/CMakeFiles

build-delete: _gum-confirm-no
    /bin/rm -rf $CUBRID_BUILD_DIR

asdf-java:
    asdf install java $(asdf list all java | fzf)

asdf-java-global:
    asdf global java $(asdf list java | fzf)

asdf-java-local:
    asdf local java $(asdf list java | fzf)

uftrace-dump:
    uftrace dump --chrome > "uftrace-$(date +%Y%m%d_%H%M%S).json"

uftrace-serve-trace:
    trace_processor --httpd ./uftrace-*.json

format-dryrun:
    my-code-style.sh -d
    just format

format:
    @gum confirm
    my-code-style.sh

memleak-build-cubvec-assert-server: build server-start-testdb
    csql -u dba testdb -c "drop table if exists vt;"
    csql -u dba testdb -c "create table vt (vec vector);"
    csql -u dba testdb -c "insert into vt values ('[1, 2, 3]');" 2> trace.log
    # csql -u dba testdb -c "insert into vt values ('[1e-40, 2e+40]');"
    # csql -u dba testdb -c "insert into vt values ('[1, 2, nan]');"
    # csql -u dba testdb -c "select * from vt;"
    echo 'wow'

memleak-build-cubvec-assert: build
    csql -u dba testdb -S -c "drop table if exists vt;"
    csql -u dba testdb -S -c "create table vt (vec vector);"
    csql -u dba testdb -S -c "insert into vt values ('[1, 2, 3]');"

cubvec-30-l2-distance: cubvec-30-simple-sa
    # csql -u dba testdb -S -c "SELECT L2_DISTANCE('[1, 2, 3]', vec) FROM vector_table;"
    $MY_CUBRID/30-survey-distance/vector-distance.sh

cubvec-30-simple-cs:
    csql -u dba testdb -c "SELECT L2_DISTANCE('[1, 2, 3]', '[2, 3, 4]') FROM dual;"

cubvec-30-simple-sa:
    csql -u dba testdb -S -c "SELECT L2_DISTANCE('[1, 2, 3]', '[2, 3, 4]') FROM dual;"

build-test-30: build server-restart-testdb cubvec-30-l2-distance

build-test-30-simple-cs: build server-restart-testdb cubvec-30-simple-cs

build-test-30-simple-sa: build cubvec-30-simple-sa

build-recreate-distance: build recreate cubvec-30-l2-distance

run-cs: build-test-30-simple-cs

run-sa: cubvec-30-simple-sa

build-run-sa: build run-sa

debug-dual-cubvec: build
    csql -u dba testdb -S -c "drop table if exists vt;"
    csql -u dba testdb -S -c "create table vt (vec vector);"
    csql -u dba testdb -S -c "insert into vt values ('[1, 2, 3]');"
    csql -u dba testdb -S -c "insert into vt values ('[2, 3, 4]');"
    csql -u dba testdb -S -c "SELECT L2_DISTANCE(vec, '[5, 5, 5]') from vt;"
    csql -u dba testdb -S -c "SELECT L2_DISTANCE('[5, 5, 5]', vec) from vt;"
    csql -u dba testdb -S -c "SELECT L2_DISTANCE('[5, 5, 5]', '[6, 6, 6]') from vt;"

test-cs:

precommit: build test-cs

build-run-36: build run-36

run-36:
    csql -u dba testdb -S -c " \
    select L2_DISTANCE('[1, 2]', '[2, 3]');"

build-run-41: build run-41-vector-distance

run-41-old:
    csql -u dba testdb -S -c " \
    drop table if exists vt; \
    create table vt (vec vector); \
    insert into vt values ('[1.5, 2, 3e10]'); \
    SELECT vec from vt; \
    "

run-41-vector-distance:
    csql -u dba testdb -S -c " \
    select VECTOR_DISTANCE('[1, 2]', '[2, 3]', EUCLIDEAN); \
    select L2_DISTANCE('[1, 2]', '[2, 3]');"

build-run-47: build run-47

run-47:
    csql -u dba testdb -S -c "drop table if exists vt;"
    csql -u dba testdb -S -c "create table vt (vec vector);"
    csql -u dba testdb -S -c "insert into vt values ('[1.5, 2, 3e10]');"
    csql -u dba testdb -S -c "SELECT cast(vec as varchar) from vt;"

build-run-42: build run-42

run-42:
    csql -u dba testdb -S -c " \
    select L1_DISTANCE('[1, 2, 9]', '[2, 3, 0]');"

build-run: build run

run:
    just run-"$CURRENT_DIR"

prerun:
    just prerun-"$CURRENT_DIR"

build-given-when-then: build given when then

given-when-then: given when then

given:
    just given-"$CURRENT_DIR"

when:
    just when-"$CURRENT_DIR"

then:
    just then-"$CURRENT_DIR"

rr-when:
    just rr-when-"$CURRENT_DIR"

rr-when-23-create-vector-index:
    taskset -c 0-7 rr record csql -u dba testdb -S -c "create vector index idx on tbl (b);"

rr-replay:
    rr replay

given-when-then-23-2: given-23-create-vector-index-2 when-23-create-vector-index-2 then-23-create-vector-index-2

given-23-create-vector-index:
    csql -u dba testdb -S -c " \
    drop if exists tbl; \
    create table tbl (a int, b vector);"

when-23-create-vector-index:
    csql -u dba testdb -S -c "create vector index idx on tbl (b);"

then-23-create-vector-index:
    csql -u dba testdb -S -c "show index from tbl;"

given-23-create-vector-index-2:
    csql -u dba testdb -S -c " \
    drop if exists items; \
    create table items (a int, embedding vector);"

when-23-create-vector-index-2:
    csql -u dba testdb -S -c "CREATE VECTOR INDEX embedding_hnsw_idx \
    ON items (embedding) \
    WITH (M = 16, ef_construction = 64);"

then-23-create-vector-index-2:
    csql -u dba testdb -S -c "show index from items;"

prerun-23-create-vector-index:
    csql -u dba testdb -S -c " \
    drop if exists tbl; \
    create table tbl (b int);"

run-23-create-vector-index: then-23-create-vector-index

run-23-create-vector-index-check:
    csql -u dba testdb -S -c " \
    drop if exists tbl; \
    create table tbl (b int);"
    csql -u dba testdb -S -c "create vector index idx on tbl (b);"

run-44-inner-product:
    csql -u dba testdb -S -c " \
    select INNER_PRODUCT('[1, 2, 3]', '[2, 3, 5]');"

run-43-cosine-distance:
    csql -u dba testdb -S -c " \
    select COSINE_DISTANCE('[1, 2, 3]', '[2, 3, 5]');"
